# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qBsyc7o9Vx3ldQQk0mMKJ0vM1ka5d5i4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

weather_data = pd.read_csv('/content/drive/MyDrive/CropNet/USDA Crop Dataset/data/WinterWheat/2022/USDA_WinterWheat_County_2022.csv')
crop_data_corn = pd.read_csv('/content/drive/MyDrive/CropNet/USDA Crop Dataset/data/Corn/2022/USDA_Corn_County_2022.csv')
crop_data_cotton = pd.read_csv('/content/drive/MyDrive/CropNet/USDA Crop Dataset/data/Cotton/2022/USDA_Cotton_County_2022.csv')
crop_data_soybeans = pd.read_csv("/content/drive/MyDrive/CropNet/USDA Crop Dataset/data/Soybeans/2022/USDA_Soybean_County_2022.csv")
crop_data_winterwheat = pd.read_csv("/content/drive/MyDrive/CropNet/USDA Crop Dataset/data/WinterWheat/2022/USDA_WinterWheat_County_2022.csv")

crop_data = pd.concat([crop_data_corn, crop_data_cotton, crop_data_soybeans ,crop_data_winterwheat], ignore_index=True)

print(weather_data.columns.tolist())
print(crop_data.columns.tolist())

crop_data.tail()

merged_data = pd.merge(weather_data, crop_data, on= ['commodity_desc', 'year', 'state_ansi', 'state_name', 'county_ansi', 'county_name', 'asd_code', 'asd_desc', 'domain_desc', 'source_desc', 'agg_level_desc', 'PRODUCTION, MEASURED IN BU', 'YIELD, MEASURED IN BU / ACRE'])

merged_data.drop(columns=['reference_period_desc_x'], inplace=True)

X = merged_data.drop(columns=['YIELD, MEASURED IN BU / ACRE','year','state_name','commodity_desc','county_name','asd_desc','domain_desc','source_desc','agg_level_desc','PRODUCTION, MEASURED IN 480 LB BALES','YIELD, MEASURED IN LB / ACRE','reference_period_desc_y'])  # Features
y = merged_data['YIELD, MEASURED IN BU / ACRE']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X_train.columns

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

svm_regressor = SVR(kernel='linear')

svm_regressor.fit(X_train_scaled, y_train)

y_pred = svm_regressor.predict(X_test_scaled)

X_test_scaled.shape

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

print(y_pred)





